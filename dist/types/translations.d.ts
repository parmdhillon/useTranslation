/**
 * Type definitions for translations
 * This file is typically auto-generated by the build scripts
 */
/**
 * Supported language code type
 * Replace this with your actual supported language codes
 */
export type SupportedLanguage = string;
/**
 * Translation namespace type
 * Replace this with your actual namespaces
 * @example 'common' | 'auth' | 'dashboard'
 */
export type TranslationNamespace = string;
/**
 * Base translations interface
 * This should be replaced with your actual translation structure
 */
export interface Translations {
    [namespace: string]: any;
}
/**
 * Utility type to extract translation keys as dot-notation strings
 */
type PathImpl<T, Key extends keyof T> = Key extends string ? T[Key] extends Record<string, any> ? `${Key}.${PathImpl<T[Key], keyof T[Key]>}` : Key : never;
type Path<T> = PathImpl<T, keyof T>;
/**
 * Translation key type for a given namespace
 * This provides type-safe dot-notation keys
 */
export type TranslationKey<N extends TranslationNamespace> = string;
/**
 * Helper type to get translation keys for a specific namespace
 * @example TranslationKeys<'common'> // => 'nav.back' | 'nav.home' | ...
 */
export type TranslationKeys<T> = Path<T>;
export {};
//# sourceMappingURL=translations.d.ts.map